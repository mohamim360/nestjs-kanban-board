// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task[]
  
  @@map("users")
}

model Board {
  id        String   @id @default(cuid())
  title     String   @default("Project Kanban Board")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  columns BoardColumn[]
  
  @@map("boards")
}

model BoardColumn {
  id      String @id @default(cuid())
  name    String
  type    ColumnType // 'todo', 'inprogress', 'done'
  order   Int    @default(0)
  
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  tasks   Task[]
  
  @@map("board_columns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    Priority @default(Medium)
  dueDate     DateTime?
  tags        String[] // Stored as text array in PostgreSQL
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  columnId      String
  column        BoardColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
  
  assignedUserId String?
  assignedUser   User?     @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

enum ColumnType {
  todo
  inprogress
  done
}

enum Priority {
  Low
  Medium
  High
}